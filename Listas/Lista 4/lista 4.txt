
<< LISTA DE STRUCT >>

-- Exercicio 1

#include <stdio.h>
#include <stdlib.h>

typedef struct $
{
	short int ddd;
	int numero_telefone;
	
} telefone;

int main()
{

	telefone num[3];

	num[0].ddd = 34;
	num[1].ddd = 11;
	num[2].ddd = 31;

	num[0].numero_telefone = 991582475;
	num[1].numero_telefone = 917264833;
	num[2].numero_telefone = 974851264;

	for (int i = 0; i < 3; ++i)
	{
		printf("Numero cadastrado: (%d) %d\n", num[i].ddd, num[i].numero_telefone);
	}


	return 0;
}

-- Exercicio 2

#include <stdio.h>
#include <stdlib.h>

typedef struct
{
	int dia;
	int mes;
	int ano;

} Data;

int main()
{
	Data datas[3];

	datas[0].dia = 25;
	datas[1].dia = 27;
	datas[2].dia = 8;

	datas[0].mes = 5;
	datas[1].mes = 7;
	datas[2].mes = 2;

	datas[0].ano = 2015;
	datas[1].ano = 2000;
	datas[2].ano = 1985;

	int maior;

	maior = datas[0].ano;

	for (int i = 0; i < 3; ++i)
	{
		if (maior < datas[i].ano)
		{
			maior = datas[i].ano;
		}
	}

	printf("O maior ano é: %d\n", maior);


	return 0;
}



-- Exercicio 3

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct 
{
	char rua[50];
	char cidade[30];
	char estado[3];
	char complemento[30];
	int numero;
	int cep;
	
} Endereco;

int main()
{
	Endereco a[3];

	strcpy(a[0].rua, "Nego Amancio");
	strcpy(a[1].rua, "Joao Naves de Avila");
	strcpy(a[2].rua, "Quintino Bocaiuva");

	a[0].numero = 360;
	a[1].numero = 125;
	a[2].numero = 15;

	strcpy(a[0].complemento, "sem complemento");
	strcpy(a[1].complemento, "bloco b");
	strcpy(a[2].complemento, "sem complemento");

	a[0].cep = 38414187;
	a[1].cep = 39415162;
	a[2].cep = 38450623;

	strcpy(a[0].cidade, "Uberlandia");
	strcpy(a[1].cidade, "São Paulo");
	strcpy(a[2].cidade, "Prata");

	strcpy(a[0].estado, "MG");
	strcpy(a[1].estado, "SP");
	strcpy(a[2].estado, "MG");

	printf("Endereços em MG:\n\n");

	for (int i = 0; i < 3; ++i)
	{
		if (strcmp(a[i].estado,"MG") == 0)
		{
			printf("Rua: %s\n", a[i].rua);
			printf("Numero: %d\n", a[i].numero);
			printf("CEP: %d\n", a[i].cep);
			printf("Complemento: %s\n", a[i].complemento);
			printf("Cidade: %s\n", a[i].cidade);
			printf("Estado: %s\n\n", a[i].estado);
		}
	}


	return 0;
}



-- Exercicio 4

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct
{
	short int ddd;
	int numero_telefone;
	
} Telefone;

typedef struct
{
	int dia;
	int mes;
	int ano;

} Data;

typedef struct 
{
	char rua[50];
	char cidade[30];
	char estado[4];
	char complemento[30];
	int numero;
	int cep;
	
} Endereco;

typedef struct 
{
	char nome[50];
	char sexo;
	char estado_civil[30];
	char cpf[13];
	double salario;
	char identidade[12];
	Endereco endereco_comercial;
	Endereco endereco_residencial;
	Telefone telefone;
	Telefone telefone_comercial;
	Data data_nascimento;
	Data data_ingresso;

} Cadastro;

void imprimeop(Cadastro *pessoas);

void listarcad(Cadastro *pessoas)
{
	for (int i = 0; i < 5; ++i)
	{
		printf("Nome: %s, Sexo: %c, Estado Civil: %s, Identidade(RG): %s,\n", pessoas[i].nome, pessoas[i].sexo, pessoas[i].estado_civil, pessoas[i].identidade);
		printf("CPF: %s, Salário: %.2lf, Endereço Comercial- Rua: %s, Numero: %d, Complemento: %s, CEP: %d,\n", pessoas[i].cpf, pessoas[i].salario, pessoas[i].endereco_comercial.rua, pessoas[i].endereco_comercial.numero, pessoas[i].endereco_comercial.complemento, pessoas[i].endereco_comercial.cep);
		printf("Endereço Comercial - Cidade: %s, Estado: %s, Endereço Residencial - Rua: %s, Numero: %d, Complemento: %s, CEP: %d,\n", pessoas[i].endereco_comercial.cidade, pessoas[i].endereco_comercial.estado, pessoas[i].endereco_residencial.rua, pessoas[i].endereco_residencial.numero, pessoas[i].endereco_residencial.complemento, pessoas[i].endereco_residencial.cep);
		printf("Endereço Residencial - Cidade: %s, Estado: %s, Telefone Comercial: (%d)%d, Telefone Pessoal: (%d)%d,\n", pessoas[i].endereco_residencial.cidade, pessoas[i].endereco_residencial.estado, pessoas[i].telefone_comercial.ddd, pessoas[i].telefone_comercial.numero_telefone, pessoas[i].telefone.ddd, pessoas[i].telefone.numero_telefone);
		printf("Data de Nascimento: %d/%d/%d, Data de Ingresso: %d/%d/%d\n\n", pessoas[i].data_nascimento.dia, pessoas[i].data_nascimento.mes, pessoas[i].data_nascimento.ano, pessoas[i].data_ingresso.dia, pessoas[i].data_ingresso.mes, pessoas[i].data_ingresso.ano);
	}

	imprimeop(pessoas);
	return;
}


void listar1990(Cadastro *pessoas)
{
	for (int i = 0; i < 5; ++i)
	{
		if (pessoas[i].data_nascimento.ano > 1990)
		{
			
		printf("Nome: %s, Sexo: %c, Estado Civil: %s, Identidade(RG): %s,\n", pessoas[i].nome, pessoas[i].sexo, pessoas[i].estado_civil, pessoas[i].identidade);
		printf("CPF: %s, Salário: %.2lf, Endereço Comercial- Rua: %s, Numero: %d, Complemento: %s, CEP: %d,\n", pessoas[i].cpf, pessoas[i].salario, pessoas[i].endereco_comercial.rua, pessoas[i].endereco_comercial.numero, pessoas[i].endereco_comercial.complemento, pessoas[i].endereco_comercial.cep);
		printf("Endereço Comercial - Cidade: %s, Estado: %s, Endereço Residencial - Rua: %s, Numero: %d, Complemento: %s, CEP: %d,\n", pessoas[i].endereco_comercial.cidade, pessoas[i].endereco_comercial.estado, pessoas[i].endereco_residencial.rua, pessoas[i].endereco_residencial.numero, pessoas[i].endereco_residencial.complemento, pessoas[i].endereco_residencial.cep);
		printf("Endereço Residencial - Cidade: %s, Estado: %s, Telefone Comercial: (%d)%d, Telefone Pessoal: (%d)%d,\n", pessoas[i].endereco_residencial.cidade, pessoas[i].endereco_residencial.estado, pessoas[i].telefone_comercial.ddd, pessoas[i].telefone_comercial.numero_telefone, pessoas[i].telefone.ddd, pessoas[i].telefone.numero_telefone);
		printf("Data de Nascimento: %d/%d/%d, Data de Ingresso: %d/%d/%d\n\n", pessoas[i].data_nascimento.dia, pessoas[i].data_nascimento.mes, pessoas[i].data_nascimento.ano, pessoas[i].data_ingresso.dia, pessoas[i].data_ingresso.mes, pessoas[i].data_ingresso.ano);
		
		}
	}

	imprimeop(pessoas);
	return;
}


void copiadados(Cadastro *pessoas)
{
	int op = 0;
	int op1 = 0;
	
	printf("Entre com a posiçao no vetor que sera copiada(0-4): ");
	scanf("%d", &op);
	printf("Entre com a posiçao no vetor que sera sobreescrita pela copia(0-4): ");
	scanf("%d", &op1);

	pessoas[op1] = pessoas[op];

	printf("\n");
	imprimeop(pessoas);
	return;
}


void cadastraruser(Cadastro *pessoas)
{
	int op = 0;
	printf("Entre com a posiçao no vetor para o cadastro(0-4): ");
	scanf("%d", &op);
	printf("\n");

	if ((op < 5) && (op >= 0))
	{
		getchar();
		printf("Digite o nome: ");
		fgets(pessoas[op].nome, 49, stdin);
		pessoas[op].nome[strcspn(pessoas[op].nome, "\n")] = '\0';

		printf("\nDigite o sexo(H ou M): ");
		scanf("%c", &pessoas[op].sexo);
		getchar();

		printf("\nDigite o Estado Civil: ");
		fgets(pessoas[op].estado_civil, 30, stdin);
		pessoas[op].estado_civil[strcspn(pessoas[op].estado_civil, "\n")] = '\0';

		printf("\nDigite a Identidade(RG): ");
		fgets(pessoas[op].identidade, 12, stdin);
		pessoas[op].identidade[strcspn(pessoas[op].identidade, "\n")] = '\0';

		printf("\nDigite o CPF: ");
		fgets(pessoas[op].cpf, 13, stdin);
		pessoas[op].cpf[strcspn(pessoas[op].cpf, "\n")] = '\0';

		printf("\nDigite o Sálario: ");
		scanf("%lf", &pessoas[op].salario);
		getchar();

		printf("\nDigite o Endereço Comercial(Rua): ");
		fgets(pessoas[op].endereco_comercial.rua, 50, stdin);
		pessoas[op].endereco_comercial.rua[strcspn(pessoas[op].endereco_comercial.rua, "\n")] = '\0';

		printf("\nDigite o Endereço Comercial(Numero): ");
		scanf("%d", &pessoas[op].endereco_comercial.numero);
		getchar();

		printf("\nDigite o Endereço Comercial(Complemento): ");
		fgets(pessoas[op].endereco_comercial.complemento, 30, stdin);
		pessoas[op].endereco_comercial.complemento[strcspn(pessoas[op].endereco_comercial.complemento, "\n")] = '\0';

		printf("\nDigite o Endereço Comercial(Cidade): ");
		fgets(pessoas[op].endereco_comercial.cidade, 30, stdin);
		pessoas[op].endereco_comercial.cidade[strcspn(pessoas[op].endereco_comercial.cidade, "\n")] = '\0';

		printf("\nDigite o Endereço Comercial(Estado - Sigla): ");
		fgets(pessoas[op].endereco_comercial.estado, 4, stdin);
		pessoas[op].endereco_comercial.estado[strcspn(pessoas[op].endereco_comercial.estado, "\n")] = '\0';

		printf("\nDigite o Endereço Residencial(Rua): ");
		fgets(pessoas[op].endereco_residencial.rua, 50, stdin);
		pessoas[op].endereco_residencial.rua[strcspn(pessoas[op].endereco_residencial.rua, "\n")] = '\0';

		printf("\nDigite o Endereço Residencial(Numero): ");
		scanf("%d", &pessoas[op].endereco_residencial.numero);
		getchar();

		printf("\nDigite o Endereço Residencial(Complemento): ");
		fgets(pessoas[op].endereco_residencial.complemento, 30, stdin);
		pessoas[op].endereco_residencial.complemento[strcspn(pessoas[op].endereco_residencial.complemento, "\n")] = '\0';

		printf("\nDigite o Endereço Residencial(Cidade): ");
		fgets(pessoas[op].endereco_residencial.cidade, 30, stdin);
		pessoas[op].endereco_residencial.cidade[strcspn(pessoas[op].endereco_residencial.cidade, "\n")] = '\0';

		printf("\nDigite o Endereço Residencial(Estado - Sigla):");
		fgets(pessoas[op].endereco_residencial.estado, 4, stdin);
		pessoas[op].endereco_residencial.estado[strcspn(pessoas[op].endereco_residencial.estado, "\n")] = '\0';
 	
		printf("\nDigite o Telefone Comercial(ddd numero do telefone): ");
		scanf("%d %d", &pessoas[op].telefone_comercial.ddd, &pessoas[op].telefone_comercial.numero_telefone);
		getchar();

		printf("\nDigite o Telefone Pessoal(ddd numero do telefone): ");
		scanf("%d %d", &pessoas[op].telefone.ddd, &pessoas[op].telefone.numero_telefone);
		getchar();

		printf("\nDigite a data de Nascimento(dd mm aaa): ");
		scanf("%d %d %d", &pessoas[op].data_nascimento.dia, &pessoas[op].data_nascimento.mes, &pessoas[op].data_nascimento.ano);
		getchar();

		printf("\nDigite a data de Ingresso(dd mm aaa): ");
		scanf("%d %d %d", &pessoas[op].data_ingresso.dia, &pessoas[op].data_ingresso.mes, &pessoas[op].data_ingresso.ano);
		getchar();

		setbuf(stdin, NULL);
		imprimeop(pessoas);
	}
	else
	{
		printf("Valor Invalido\n");
		imprimeop(pessoas);
	}
	return;
}


void imprimeop(Cadastro *pessoas)
{
	int op = 0;
	printf("\n<< Cadastro >>\n\n");
	printf("Escolha uma opção:\n");
	printf("1- Listar todos os cadastros\n");
	printf("2- Cadastrar/Sobreescrever nova pessoa\n");
	printf("3- Listar pessoas que nasceram depois de 1990\n");
	printf("4- Copiar dados de um cadastro para outro\n");
	printf("5- Sair\n");
	scanf("%d", &op);
	printf("\n");
 
	if (op == 1)
	{
		listarcad(pessoas);
	}
	else if (op == 2)
	{
		cadastraruser(pessoas);
	}
	else if (op == 3)
	{
		listar1990(pessoas);
	}
	else if (op == 4)
	{
		copiadados(pessoas);
	}
	else if (op == 5)
	{
		return;
	}
	else
	{
		printf("Valor digitado nao valido\n");
		imprimeop(pessoas);
	}

	return;
}




int main()
{
	Cadastro pessoas[5];
	Cadastro *ppessoas;

	ppessoas = pessoas;

	strcpy(pessoas[0].nome, "Joaquina da silva");
	strcpy(pessoas[1].nome, "Jorge aroldo");
	strcpy(pessoas[2].nome, "Pericles Afonso");
	strcpy(pessoas[3].nome, "Cristina Maria");
	strcpy(pessoas[4].nome, "Martin alvez");

	pessoas[0].sexo = 'M';
	pessoas[1].sexo = 'H';
	pessoas[2].sexo = 'H';
	pessoas[3].sexo ='M';
	pessoas[4].sexo = 'H';

	strcpy(pessoas[0].estado_civil, "Solteiro(a)");
	strcpy(pessoas[1].estado_civil, "Casado(a)");
	strcpy(pessoas[2].estado_civil, "Divorciado(a)");
	strcpy(pessoas[3].estado_civil, "Casado(a)");
	strcpy(pessoas[4].estado_civil, "Solteiro(a)");

	strcpy(pessoas[0].identidade, "MG32415978");
	strcpy(pessoas[1].identidade, "SP45187798");
	strcpy(pessoas[2].identidade, "RS17453298");
	strcpy(pessoas[3].identidade, "MG78465213");
	strcpy(pessoas[4].identidade, "PR74613528");

	strcpy(pessoas[0].cpf, "14527894147");
	strcpy(pessoas[1].cpf, "32154167801");
	strcpy(pessoas[2].cpf, "03417598645");
	strcpy(pessoas[3].cpf, "34788964513");
	strcpy(pessoas[4].cpf, "87544469814");

	pessoas[0].salario = 2500;
	pessoas[1].salario = 2300;
	pessoas[2].salario = 5500;
	pessoas[3].salario = 3256.5;
	pessoas[4].salario = 2000;

	strcpy(pessoas[0].endereco_comercial.rua, "Rondon Pacheco");
	strcpy(pessoas[1].endereco_comercial.rua, "Avenida Brasil");
	strcpy(pessoas[2].endereco_comercial.rua, "João Naves de Avila");
	strcpy(pessoas[3].endereco_comercial.rua, "Quintino Bocaiuva");
	strcpy(pessoas[4].endereco_comercial.rua, "Geraldo Cunha");

	strcpy(pessoas[0].endereco_comercial.cidade, "Uberlandia");
	strcpy(pessoas[1].endereco_comercial.cidade, "Uberlandia");
	strcpy(pessoas[2].endereco_comercial.cidade, "Uberlandia");
	strcpy(pessoas[3].endereco_comercial.cidade, "Uberlandia");
	strcpy(pessoas[4].endereco_comercial.cidade, "Uberlandia");

	strcpy(pessoas[0].endereco_comercial.estado, "MG");
	strcpy(pessoas[1].endereco_comercial.estado, "MG");
	strcpy(pessoas[2].endereco_comercial.estado, "MG");
	strcpy(pessoas[3].endereco_comercial.estado, "MG");
	strcpy(pessoas[4].endereco_comercial.estado, "MG");

	strcpy(pessoas[0].endereco_comercial.complemento, "Sem complemento");
	strcpy(pessoas[1].endereco_comercial.complemento, "Bloco A");
	strcpy(pessoas[2].endereco_comercial.complemento, "Sem complemento");
	strcpy(pessoas[3].endereco_comercial.complemento, "Casa 2");
	strcpy(pessoas[4].endereco_comercial.complemento, "Bloco C");

	pessoas[0].endereco_comercial.numero = 374;
	pessoas[1].endereco_comercial.numero = 2013;
	pessoas[2].endereco_comercial.numero = 152;
	pessoas[3].endereco_comercial.numero = 987;
	pessoas[4].endereco_comercial.numero = 1745;

	pessoas[0].endereco_comercial.cep = 38451789;
	pessoas[1].endereco_comercial.cep = 34714528;
	pessoas[2].endereco_comercial.cep = 31205769;
	pessoas[3].endereco_comercial.cep = 35978145;
	pessoas[4].endereco_comercial.cep = 38451526;

	strcpy(pessoas[0].endereco_residencial.rua, "Nego Amancio");
	strcpy(pessoas[1].endereco_residencial.rua, "Boa Vista");
	strcpy(pessoas[2].endereco_residencial.rua, "João Naves de Avila");
	strcpy(pessoas[3].endereco_residencial.rua, "Pedro Algusto");
	strcpy(pessoas[4].endereco_residencial.rua, "Maria Aparecida");

	strcpy(pessoas[0].endereco_residencial.cidade, "Uberlandia");
	strcpy(pessoas[1].endereco_residencial.cidade, "Prata");
	strcpy(pessoas[2].endereco_residencial.cidade, "Uberlandia");
	strcpy(pessoas[3].endereco_residencial.cidade, "Araguari");
	strcpy(pessoas[4].endereco_residencial.cidade, "Uberlandia");

	strcpy(pessoas[0].endereco_residencial.estado, "MG");
	strcpy(pessoas[1].endereco_residencial.estado, "MG");
	strcpy(pessoas[2].endereco_residencial.estado, "MG");
	strcpy(pessoas[3].endereco_residencial.estado, "MG");
	strcpy(pessoas[4].endereco_residencial.estado, "MG");

	strcpy(pessoas[0].endereco_residencial.complemento, "Sem complemento");
	strcpy(pessoas[1].endereco_residencial.complemento, "Sem complemento");
	strcpy(pessoas[2].endereco_residencial.complemento, "Bloco D");
	strcpy(pessoas[3].endereco_residencial.complemento, "Casa 1");
	strcpy(pessoas[4].endereco_residencial.complemento, "Bloco C");

	pessoas[0].endereco_residencial.numero = 365;
	pessoas[1].endereco_residencial.numero = 450;
	pessoas[2].endereco_residencial.numero = 410;
	pessoas[3].endereco_residencial.numero = 780;
	pessoas[4].endereco_residencial.numero = 985;

	pessoas[0].endereco_residencial.cep = 38415123;
	pessoas[1].endereco_residencial.cep = 78414952;
	pessoas[2].endereco_residencial.cep = 64515978;
	pessoas[3].endereco_residencial.cep = 30214478;
	pessoas[4].endereco_residencial.cep = 41578023;

	pessoas[0].telefone.ddd = 34;
	pessoas[1].telefone.ddd = 34;
	pessoas[2].telefone.ddd = 34;
	pessoas[3].telefone.ddd = 34;
	pessoas[4].telefone.ddd = 34;

	pessoas[0].telefone.numero_telefone = 987875114;
	pessoas[1].telefone.numero_telefone = 978564531;
	pessoas[2].telefone.numero_telefone = 978523641;
	pessoas[3].telefone.numero_telefone = 978546123;
	pessoas[4].telefone.numero_telefone = 988874563;

	pessoas[0].telefone_comercial.ddd = 34;
	pessoas[1].telefone_comercial.ddd = 34;
	pessoas[2].telefone_comercial.ddd = 34;
	pessoas[3].telefone_comercial.ddd = 34;
	pessoas[4].telefone_comercial.ddd = 34;

	pessoas[0].telefone_comercial.numero_telefone = 987875114;
	pessoas[1].telefone_comercial.numero_telefone = 978564531;
	pessoas[2].telefone_comercial.numero_telefone = 978523641;
	pessoas[3].telefone_comercial.numero_telefone = 978546123;
	pessoas[4].telefone_comercial.numero_telefone = 988874563;

	pessoas[0].data_nascimento.dia = 25;
	pessoas[1].data_nascimento.dia = 12;
	pessoas[2].data_nascimento.dia = 15;
	pessoas[3].data_nascimento.dia = 04;
	pessoas[4].data_nascimento.dia = 21;

	pessoas[0].data_nascimento.mes = 04;
	pessoas[1].data_nascimento.mes = 02;
	pessoas[2].data_nascimento.mes = 06;
	pessoas[3].data_nascimento.mes = 11;
	pessoas[4].data_nascimento.mes = 01;

	pessoas[0].data_nascimento.ano = 1995;
	pessoas[1].data_nascimento.ano = 1988;
	pessoas[2].data_nascimento.ano = 1993;
	pessoas[3].data_nascimento.ano = 1989;
	pessoas[4].data_nascimento.ano = 1990;

	pessoas[0].data_ingresso.dia = 11;
	pessoas[1].data_ingresso.dia = 07;
	pessoas[2].data_ingresso.dia = 06;
	pessoas[3].data_ingresso.dia = 10;
	pessoas[4].data_ingresso.dia = 12;

	pessoas[0].data_ingresso.mes = 05;
	pessoas[1].data_ingresso.mes = 05;
	pessoas[2].data_ingresso.mes = 06;
	pessoas[3].data_ingresso.mes = 06;
	pessoas[4].data_ingresso.mes = 06;

	pessoas[0].data_ingresso.ano = 2010;
	pessoas[1].data_ingresso.ano = 2008;
	pessoas[2].data_ingresso.ano = 2004;
	pessoas[3].data_ingresso.ano = 2010;
	pessoas[4].data_ingresso.ano = 2012;

	imprimeop(ppessoas);

	return 0;
}



-- Exercicio 5

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct 
{
	char matricula[13];
	char nome[50];
	float nota[3];
	float media;
	int faltas;
	
} Cad_alunos;

void calcmedia(Cad_alunos *alunos)
{
	for (int i = 0; i < 3; ++i)
	{
		alunos[i].media = (alunos[i].nota[0] + alunos[i].nota[1] + alunos[i].nota[2]);
	}
	return;
}

void cadastraaluno(Cad_alunos *alunos)
{
	printf("\n<< Cadastro de Alunos >>\n\n");
	printf("Entre com os dados\n");

	for (int i = 0; i < 3; ++i)
	{
		printf("\nAluno %d\n", i+1);
		printf("Numero de Matricula: ");
		fgets(alunos[i].matricula, 13, stdin);
		alunos[i].matricula[strcspn(alunos[i].matricula, "\n")] = '\0';

		printf("Nome: ");
		fgets(alunos[i].nome, 50, stdin);
		alunos[i].nome[strcspn(alunos[i].nome, "\n")] = '\0';

		printf("Nota 1: ");
		scanf("%f", &alunos[i].nota[0]);

		printf("Nota 2: ");
		scanf("%f", &alunos[i].nota[1]);

		printf("Nota 3: ");
		scanf("%f", &alunos[i].nota[2]);

		printf("Numero de Faltas: ");
		scanf("%d", &alunos[i].faltas);
		printf("\n");
		
		getchar();
	}
	return;
}

int main(void)
{
	Cad_alunos alunos[3];
	Cad_alunos *palunos;
	float maior_nota = 0;
	float maior_media = 0;
	float menor_media = 0;

	palunos = alunos;

	cadastraaluno(palunos);
	calcmedia(palunos);

	maior_nota = alunos[0].nota[0];
	maior_media = alunos[0].media;
	menor_media = alunos[0].media;

	for (int i = 0; i < 3; ++i)
	{
		if (maior_nota < alunos[i].nota[0])
		{
			maior_nota = alunos[i].nota[0];
		}
		if (maior_media < alunos[i].media)
		{
			maior_media = alunos[i].media;
		}
		if (menor_media > alunos[i].media)
		{
			menor_media = alunos[i].media;
		}
	}
	if (maior_media > 100)
	{
		maior_media = 100;
	}



	printf("A maior nota da prova 1 é: %.2f\n", maior_nota);
	printf("A maior media é: %.2f\n", maior_media);
	printf("A menor media é: %.2f\n", menor_media);

	for (int i = 0; i < 3; ++i)
	{
		if (alunos[i].faltas > 18)
		{
			printf("Aluno %d reprovado por falta\n", i+1);
		}
		else if (alunos[i].media >= 60)
		{
			printf("Aluno %d aprovado\n", i+1);
		}
		else if (alunos[i].media < 60)
		{
			printf("Aluno %d reprovado\n", i+1);
		}
		else if (alunos[i].faltas > 18 && alunos[i].media < 60)
		{
			printf("Aluno %d reprovado por falta\n", i+1);
		}
	}



	return 0;
}


 













 << LISTA DE FUNÇAO >>

 -- Exercicio 1
 #include <stdio.h>
#include <stdlib.h>

void desenhalinha()
{
	for (int i = 0; i < 150; ++i)
	{
		printf("=");
	}
	return;
}

int main(void)
{
	printf("\n");
	desenhalinha();
	printf("\n\n");
	return 0;
}



-- Exercicio 2

#include <stdio.h>
#include <stdlib.h>

void desenhalinha(int num)
{
	for (int i = 0; i < num; ++i)
	{
		printf("=");
	}
	return;
}

int main(void)
{
	int linhas = 0;
	printf("Digite quantas linhas serão imprimidas: ");
	scanf("%d", &linhas);
	desenhalinha(linhas);
	printf("\n\n");
	return 0;
}



-- Exercicio 3

#include <stdio.h>
#include <stdlib.h>

void desenhalinha()
{
	for (int i = 0; i < 60; ++i)
	{
		printf("=");
	}
	return;
}

void potencia(float num, int exp)
{	
	float temp = 0;
	temp = num;

	if (exp == 0)
	{
		desenhalinha();
		printf("\nO resultado é: %d\n", 1);
		desenhalinha();
		printf("\n");
	}
	else if (exp > 0)
	{
		for (int i = 1; i < exp; i++)
		{
			num = num*temp;
		}
		desenhalinha();
		printf("\nO resultado é: %.0f\n", num);
		desenhalinha();
		printf("\n");
	}
	else if (exp < 0)
	{
		for (int i = exp; i <= 0; i++)
		{
			num = (num)*(1/temp);
		}
		desenhalinha();
		printf("\nO resultado é: %.3f\n", num);
		desenhalinha();
		printf("\n");
	}

	return;
}

int main()
{
	int expoente = 0;
	float num = 0;

	printf("\n");
	desenhalinha();
	
	printf("\nDigite o valor do numero: ");
	scanf("%f", &num);
	
	printf("Digite o valor do expoente: ");
	scanf("%d", &expoente);

	potencia(num, expoente);
	printf("\n");

	return 0;
}



-- Exercicio 5

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int quadperfeio(float num)
{
	float temp = 0;
	double x = 0;
	temp = sqrt(num);

	float frac = 0;

	frac = modf(temp, &x);

	if (frac == 0)
	{
		return 0;
	}
	else
	{	
		return 1;
	}
}


int main(void)
{
	float valor = 0;
	int verifica = 0;
	printf("\n<<< Quadrado Perfeito >>>\n\n");

	printf("Digite o valor do numero: ");
	scanf("%f", &valor);

	verifica = quadperfeio(valor);

	if (verifica == 0)
	{
		printf("Verdadeiro\n");
	}
	else
	{
		printf("Falso\n");
	}
	return 0;
}



-- Exercicio 7

#include <stdio.h>
#include <stdlib.h>

void trocavar(double *a, double *b)
{
	double temp;
	temp = *a;
	*a = *b;
	*b = temp;
	return;
}

int main(void)
{
	double a = 0;
	double b = 0;
	double *pa = NULL;
	double *pb = NULL;

	pa = &a;
	pb = &b;

	printf("Digite o valor de A: ");
	scanf("%lf", &a);

	printf("Digite o valor de B: ");
	scanf("%lf", &b);

	trocavar(pa, pb);

	printf("Valor de A: %.2f\n", *pa);
	printf("Valor de B: %.2f\n", *pb);

	return 0;
}



-- Exercicio 8








-- Exercicio 28


#include <stdio.h>
#include <stdio.h>

void copiavet(double *vetor, double *vetordest, int n)
{
	vetordest = malloc(n * sizeof(double));

	for (int i = 0; i < n; ++i)
	{
		vetordest[i] = vetor[i];	
	}
	free(vetordest);

	return;
}

int main(void)
{
	double vetor_ori[10] = {0};
	double *vetor_dest;

	copiavet(vetor_ori, vetor_dest, 10);

	return 0;
}

// A função não funciona porque é alterado o valor que ponteiro vetor_dest está apontando
// levando a perda da localização da alocação feita para vetordest.

// A solução seria passar o ponteiro por parametro, ou seja, um ponteiro que aponta para um ponteiro.